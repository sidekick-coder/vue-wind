// vite.config.js
import { resolve, basename } from 'path'
import { defineConfig, build, mergeConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import dts from 'vite-plugin-dts'

import fg from 'fast-glob'
import fs from 'fs'

const files = fg.sync(['src/**/*.vue'])

const indexPath = resolve(__dirname, 'src/index.ts')

let indexContent = `// auto generated by build script`

files.forEach((f) => {
    const name = basename(f, '.vue')
    
    if (name === 'index') return

    indexContent += `\nexport { default as ${name} } from './${name}.vue'`
})

fs.writeFileSync(indexPath, indexContent)

files.push(indexPath)

const baseConfig = defineConfig({
  plugins: [vue(), dts({
    insertTypesEntry: true,
    tsConfigFilePath: resolve(__dirname, 'tsconfig.build.json'),
    entryRoot: resolve(__dirname, 'src'),
    cleanVueFileName: true,
    beforeWriteFile: (filePath, content) => {
      if (filePath.endsWith('index.d.ts')) {
        content = indexContent.replace(/.vue/g, '')
      }

      return {
        filePath,
        content,
      }
    }
  })],
  build: {
    emptyOutDir: false,
    rollupOptions: {
      external: ['vue', '@vue-wind/composables'],
      output: {
        globals: {
          vue: 'Vue',
          '@vue-wind/composables': '@vue-wind/composables',
        },
      },
    },
  }
})


async function buildFile(filename: string) {
  const name = basename(filename).replace(/.(vue|ts)/, '')

  const config = mergeConfig(baseConfig, defineConfig({
    build: {
      lib: {
        entry: resolve(__dirname, filename),
        name: name,
        fileName: (format) => `${name}.${format}.js`,
      },
    }
  }))

  await build(config)
}

async function main(){

  const haveDist = fs.existsSync(resolve(__dirname, 'dist'))

  if (haveDist) {
    fs.rmSync(resolve(__dirname, 'dist'), { recursive: true })
  }  

  for await (const file of files) {
    await buildFile(file)
  }

  if (!process.argv.includes('--watch')) {
    return
  }

  fs.watch(resolve(__dirname, 'src'), async (event, filename) => {
    console.log(`file changed: ${filename}`)
    
    await buildFile(resolve(__dirname, 'src', filename))

  })

  console.log('watching files...')

}


main()